!-------------------------------------------------------------------------
! NASA Goddard Space Flight Center Land Information System (LIS) V4.0.2
! Released October 2005
!
! See SOFTWARE DISTRIBUTION POLICY for software distribution policies
!
! The LIS source code and documentation are in the public domain,
! available without fee for educational, research, non-commercial and
! commercial purposes.  Users may distribute the binary or source
! code to third parties provided this statement appears on all copies and
! that no charge is made for such copies.
!
! NASA GSFC MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE
! SOFTWARE FOR ANY PURPOSE.  IT IS PROVIDED AS IS WITHOUT EXPRESS OR
! IMPLIED WARRANTY.  NEITHER NASA GSFC NOR THE US GOVERNMENT SHALL BE
! LIABLE FOR ANY DAMAGES SUFFERED BY THE USER OF THIS SOFTWARE.
!
! See COPYRIGHT.TXT for copyright details.
!
!-------------------------------------------------------------------------
#include "misc.h"
!BOP
! !ROUTINE: time_interp_geos.F90
!
! !DESCRIPTION:
!  Opens, reads, and interpolates GEOS forcing.  
!
!    TIME1 = most recent past data\\
!    TIME2 = nearest future data \\
!
!  The strategy for missing data is to go backwards up to 10 days to get
!  forcing at the same time of day.
!
! \subsection{Core Functions of time$_-$interp$_-$geos}
!  \begin{description}
!  \item[zterp]  
!   Performs zenith angle-based temporal interpolation
!  \end{description}
!
! !REVISION HISTORY:
!  1  Oct 1999: Jared Entin; Initial code
!  25 Oct 1999: Jared Entin; Significant F90 Revision
!  11 Apr 2000: Brian Cosgrove; Fixed name construction error 
!               in Subroutine ETA6HRFILE 
!  27 Apr 2000: Brian Cosgrove; Added correction for use of old shortwave
!               data with opposite sign convention from recent shortwave data.
!               Added capability to use time averaged shortwave & longwave data
!               Altered times which are passed into ZTERP--used to be GMT1 
!               and GMT2, now they are LDAS%ETATIME1 and LDAS%ETATIME2
!  30 Nov 2000: Jon Radakovich; Initial code based on geteta.f
!  17 Apr 2001: Jon Gottschalck; A few changes to allow model init.  
!  13 Aug 2001: Urszula Jambor; Introduced missing data replacement.     
!   5 Nov 2001: Urszula Jambor; Reset tiny negative SW values to zero. 
! !INTERFACE:
subroutine time_interp_nldas()

   btime=nldasdrv%nceptime1
   call time2date(btime,bdoy,gmt1,byr,bmo,bda,bhr,bmn)
!	gmt1=GMT1+.25
!	Make new decimal time that reflects added 15 minutes

!       This was commented out so that it no longer shifts by 15 mins
!       since this shift is no longer necessitated by forcing files
!       Forcing files already contain this shift
!SUBROUTINE TICK(TIME,DOY,GMT,YR,MO,DA,HR,MN,SS,TS)

   tempbdoy=bdoy
!	tempgmt1=gmt1-.25
   tempgmt1=gmt1
   tempbyr=byr
   tempbmo=bmo
   tempbda=bda
   tempbhr=bhr
   if (tempbhr.eq.24) tempbhr=0
   tempbmn=bmn
   tempbss=0
   tempbts=900
   call tick(newtime1,tempbdoy,tempgmt1,& 
        tempbyr,tempbmo,tempbda,tempbhr,tempbmn, & 
        tempbss,tempbts)
   
   btime=nldasdrv%nceptime2
   call time2date(btime,bdoy,gmt2,byr,bmo,bda,bhr,bmn)
!	GMT2=GMT2+.25
!       Make new decimal time that reflects added 15 minutes
   tempbdoy=bdoy
!        TEMPGMT2=GMT2-.25
   tempgmt2=gmt2
   tempbyr=byr
   tempbmo=bmo
   tempbda=bda
   tempbhr=bhr
   if (tempbhr.eq.24) tempbhr=0
   tempbmn=bmn
   tempbss=0
   tempbts=900
   call tick(newtime2,tempbdoy,tempgmt2,&
     tempbyr,tempbmo,tempbda,tempbhr,tempbmn,&
     tempbss,tempbts)

!=== Interpolate Data in time      
   if(ldas%skipintp1.ne.1.or.ldas%skipintp2.ne.1)then !Skip interp if getETA routine on, and no NCEP data
      wt1=(nldasdrv%nceptime2-lis%t%time)/(nldasdrv%nceptime2-nldasdrv%nceptime1)
      wt2=1.0-wt1
      swt1=(newtime2-lis%t%time)/(newtime2-newtime1)
      swt2=1.0-swt1
      
      do f=1,lis%d%nf
         if(f.eq.3)then
            do c=1,lis%d%nc
               do r=1,lis%d%nr
                  zdoy=ldas%doy
                  
!	compute and apply zenith angle weights

                  call zterp(1,grid(c,r)%lat,grid(c,r)%lon,&
                       gmt1,gmt2,ldas%gmt,zdoy,zw1,zw2,czb,cze,czm,ldas,grid)
                  grid(c,r)%forcing(f)=grid(c,r)%ncepdata1(f)*zw1+&
     		                grid(c,r)%ncepdata2(f)*zw2

!	In cases of small cos(zenith) angles, use linear weighting
!       to avoid overly large weights

           if((grid(c,r)%forcing(f).gt.grid(c,r)%ncepdata1(f).and. & 
              grid(c,r)%forcing(f).gt.grid(c,r)%ncepdata2(f)).and. & 
              (czb.lt.0.1.or.cze.lt.0.1))then
            grid(c,r)%forcing(f)=grid(c,r)%ncepdata1(f)*swt1+ & 
                 grid(c,r)%ncepdata2(f)*swt2
!	print *,'using swt1 and swt2',swt1,swt2
           endif

           if (grid(c,r)%forcing(f).gt.1367) then
              print *,'warning, sw radiation too high!!'
              print *,'it is',grid(c,r)%forcing(f)
              print *,'ncepdata1=',grid(c,r)%ncepdata1(f)
              print *,'ncepdata2=',grid(c,r)%ncepdata2(f)
              print *,'zw1=',zw1,'zw2=',zw2
              print *,'swt1=',swt1,'swt2=',swt2
              grid(c,r)%forcing(f)=grid(c,r)%ncepdata1(f)*swt1+ & 
                   grid(c,r)%ncepdata2(f)*swt2
           endif

           if ( (grid(c,r)%ncepdata1(f).eq.lis%d%udef).and.
     &  (grid(c,r)%ncepdata2(f).eq.lis%d%udef) ) then
	grid(c,r)%forcing(f)=lis%d%udef
	endif
          enddo
         enddo  	 
        else if(f.eq.8.or.f.eq.9)then	!do block precipitation interpolation
         do c=1,lis%d%nc
          do r=1,lis%d%nr
           grid(c,r)%forcing(f)=grid(c,r)%ncepdata2(f)	
          enddo
         enddo
        else !linearly interpolate everything else
         do c=1,lis%d%nc
          do r=1,lis%d%nr
           grid(c,r)%forcing(f)=grid(c,r)%ncepdata1(f)*wt1+ & 
                               grid(c,r)%ncepdata2(f)*wt2
          enddo
         enddo            
        endif    
       enddo   

!=== ADJUST PRECIP TO VALUE PER SEC DATA SHOULD COME IN AS VALUE PER 
!=== TIME PERIOD ONE HOUR FOR NCEP, THREE HOUR FOR ETA

       do c=1,lis%d%nc
        do r=1,lis%d%nr
         grid(c,r)%forcing(8)=grid(c,r)%forcing(8)/(60.0*60.0)
         grid(c,r)%forcing(9)=grid(c,r)%forcing(9)/(60.0*60.0)
        enddo
       enddo 

      endif !ldas%skipintp


!EOC
    end subroutine time_interp_nldas
